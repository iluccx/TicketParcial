@page "/updateticket/{Id:int}"

@inject SweetAlertService sweetAlertService
@inject IRepository repository
@inject NavigationManager navigationManager


@if (ticket is null)
{
    <div class="spinner" />
}
else
{
    <div class="row">
        <div class="col-2"></div>
        <div class="col-8">
            <div class="card shadow p-3 mb-5 bg-white rounded">
                <div class="card-header">
                    <h3>Registrar Entrada</h3>
                </div>
                <div class="card-body">
                    <div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Id Boleto</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" readonly value="@ticket.Id" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Fecha de uso</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" @bind-value="@ticket.Date" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Fue usada</label>
                            <div class="col-sm-10">
                                
                                <select class="form-select" @onchange="SelectChangedAsync">
                                    <option value="false">Falso</option>
                                    <option value="true">Verdadero</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Porteria</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" @bind-value="@ticket.Zone" />
                            </div>
                        </div>

                    </div>
                    <br>
                    <button class="btn btn-success" @onclick="Save"><i class="oi oi-check" /> Guardar</button>
                    <button class="btn btn-secondary" @onclick="Return"><i class="oi oi-arrow-thick-left" /> Regresar</button>
                </div>
            </div>
        </div>
        <div class="col-2"></div>
    </div>
}


@code {
    private Ticket? ticket;
    //<input type="text" class="form-control" @bind-value="@ticket.Used" />
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Ticket>($"/api/ticket/{Id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/ticket");
                return;
            }

            var message = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        ticket = responseHTTP.Response;
    }

    private async Task Save()
    {

        var responseHTTP = await repository.Put("/api/ticket", ticket);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }

        //await BlazoredModal.CloseAsync(ModalResult.Ok());

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = true,
                Timer = 4000
            });
        Return();
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Los cambios se guardaron correctamente");
        
    }

    private void Return()
    {
        navigationManager.NavigateTo("/ticket");
    }

    private async Task SelectChangedAsync(ChangeEventArgs e)
    {
        if (e.Value!.ToString().Equals("true"))
        {
            ticket.Used = true;
        }
        else
        {
            ticket.Used = false;
        }
    }
}
